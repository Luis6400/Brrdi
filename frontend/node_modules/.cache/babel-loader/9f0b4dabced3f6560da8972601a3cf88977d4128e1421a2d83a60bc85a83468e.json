{"ast":null,"code":"var jwt=require('jsonwebtoken');var secret='mysecretssshhhhhhh';var expiration='2h';module.exports={authMiddleware:function authMiddleware(_ref){var req=_ref.req;// allows token to be sent via req.body, req.query, or headers\nvar token=req.body.token||req.query.token||req.headers.authorization;// We split the token string into an array and return actual token\nif(req.headers.authorization){token=token.split(' ').pop().trim();}if(!token){return req;}// if token can be verified, add the decoded user's data to the request so it can be accessed in the resolver\ntry{var _jwt$verify=jwt.verify(token,secret,{maxAge:expiration}),data=_jwt$verify.data;req.user=data;}catch(_unused){console.log('Invalid token');}// return the request object so it can be passed to the resolver as `context`\nreturn req;},signToken:function signToken(_ref2){var email=_ref2.email,name=_ref2.name,_id=_ref2._id;var payload={email:email,name:name,_id:_id};return jwt.sign({data:payload},secret,{expiresIn:expiration});}};","map":{"version":3,"names":["jwt","require","secret","expiration","module","exports","authMiddleware","_ref","req","token","body","query","headers","authorization","split","pop","trim","_jwt$verify","verify","maxAge","data","user","_unused","console","log","signToken","_ref2","email","name","_id","payload","sign","expiresIn"],"sources":["/Users/luisvillarreal/bootcamp/Brrdi/frontend/src/utils/auth.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretssshhhhhhh';\nconst expiration = '2h';\n\nmodule.exports = {\n  authMiddleware: function ({ req }) {\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization;\n\n    // We split the token string into an array and return actual token\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n\n    if (!token) {\n      return req;\n    }\n\n    // if token can be verified, add the decoded user's data to the request so it can be accessed in the resolver\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    // return the request object so it can be passed to the resolver as `context`\n    return req;\n  },\n  signToken: function ({ email, name, _id }) {\n    const payload = { email, name, _id };\n    return jwt.sign({ data: payload }, secret, { expiresIn: expiration });\n  },\n};\n"],"mappings":"AAAA,GAAM,CAAAA,GAAG,CAAGC,OAAO,CAAC,cAAc,CAAC,CAEnC,GAAM,CAAAC,MAAM,CAAG,oBAAoB,CACnC,GAAM,CAAAC,UAAU,CAAG,IAAI,CAEvBC,MAAM,CAACC,OAAO,CAAG,CACfC,cAAc,CAAE,SAAAA,eAAAC,IAAA,CAAmB,IAAP,CAAAC,GAAG,CAAAD,IAAA,CAAHC,GAAG,CAC7B;AACA,GAAI,CAAAC,KAAK,CAAGD,GAAG,CAACE,IAAI,CAACD,KAAK,EAAID,GAAG,CAACG,KAAK,CAACF,KAAK,EAAID,GAAG,CAACI,OAAO,CAACC,aAAa,CAE1E;AACA,GAAIL,GAAG,CAACI,OAAO,CAACC,aAAa,CAAE,CAC7BJ,KAAK,CAAGA,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CACvC,CAEA,GAAI,CAACP,KAAK,CAAE,CACV,MAAO,CAAAD,GAAG,CACZ,CAEA;AACA,GAAI,CACF,IAAAS,WAAA,CAAiBjB,GAAG,CAACkB,MAAM,CAACT,KAAK,CAAEP,MAAM,CAAE,CAAEiB,MAAM,CAAEhB,UAAW,CAAC,CAAC,CAA1DiB,IAAI,CAAAH,WAAA,CAAJG,IAAI,CACZZ,GAAG,CAACa,IAAI,CAAGD,IAAI,CACjB,CAAE,MAAAE,OAAA,CAAM,CACNC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC9B,CAEA;AACA,MAAO,CAAAhB,GAAG,CACZ,CAAC,CACDiB,SAAS,CAAE,SAAAA,UAAAC,KAAA,CAAgC,IAApB,CAAAC,KAAK,CAAAD,KAAA,CAALC,KAAK,CAAEC,IAAI,CAAAF,KAAA,CAAJE,IAAI,CAAEC,GAAG,CAAAH,KAAA,CAAHG,GAAG,CACrC,GAAM,CAAAC,OAAO,CAAG,CAAEH,KAAK,CAALA,KAAK,CAAEC,IAAI,CAAJA,IAAI,CAAEC,GAAG,CAAHA,GAAI,CAAC,CACpC,MAAO,CAAA7B,GAAG,CAAC+B,IAAI,CAAC,CAAEX,IAAI,CAAEU,OAAQ,CAAC,CAAE5B,MAAM,CAAE,CAAE8B,SAAS,CAAE7B,UAAW,CAAC,CAAC,CACvE,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}